generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id        Int      @id @default(autoincrement())
  nome      String
  email     String   @unique
  senha     String
  status    String   @default("ativo")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Funcionario {
  id         Int            @id @default(autoincrement())
  cargo      String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  email      String         @unique
  nome       String
  alertas    Alerta?
  cartaoRfid CartaoRfid?
  logsAcesso LogAcesso?
  grupos     UsuarioGrupo[]

  @@map("funcionarios")
}

model Paciente {
  id             Int         @id @default(autoincrement())
  nome           String
  dataNascimento DateTime    @db.Date
  numeroQuarto   String?
  observacoes    String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  quartoId       Int?
  cartaoRfid     CartaoRfid?
  logsAcesso     LogAcesso[]
  quarto         Quarto?     @relation(fields: [quartoId], references: [id])
  visitantes     Visitante[]

  @@map("pacientes")
}

model Visitante {
  id           Int         @id @default(autoincrement())
  nome         String
  bi           String
  motivoVisita String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  pacienteId   Int?
  cartaoRfid   CartaoRfid?
  logsAcesso   LogAcesso[]
  paciente     Paciente?   @relation(fields: [pacienteId], references: [id])

  @@map("visitantes")
}

model Area {
  id             Int             @id @default(autoincrement())
  nome           String
  tipo           String
  nivelAcesso    String
  andar          String?
  capacidade     Int?
  status         String          @default("ativo")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  alertas        Alerta[]
  dispositivos   Dispositivo[]
  grupos         GrupoArea[]
  horariosVisita HorarioVisita[]
  logsAcesso     LogAcesso[]

  @@map("areas")
}

model Quarto {
  id           Int           @id @default(autoincrement())
  numero       String        @unique
  andar        String
  tipo         String
  capacidade   String        @default("1")
  status       String        @default("disponivel")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  alertas      Alerta[]
  dispositivos Dispositivo[]
  logsAcesso   LogAcesso[]
  pacientes    Paciente[]

  @@map("quartos")
}

model Permissao {
  id        Int      @id @default(autoincrement())
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cargo     String
  rfid      String   @unique
  salas     String
  usuario   String
  quartos   String[]

  @@map("permissoes")
}

model LogAcesso {
  id               Int          @id @default(autoincrement())
  rfid             String
  tipoAcesso       String
  dataHora         DateTime
  status           String
  dispositivoId    String?
  ipAddress        String?
  createdAt        DateTime     @default(now())
  usuarioId        Int?
  pacienteId       Int?
  visitanteId      Int?
  areaId           Int?
  quartoId         Int?
  dispositivoIdRef Int?
  area             Area?        @relation(fields: [areaId], references: [id])
  dispositivo      Dispositivo? @relation(fields: [dispositivoIdRef], references: [id])
  funcionario      Funcionario  @relation(fields: [id], references: [id])
  paciente         Paciente?    @relation(fields: [pacienteId], references: [id])
  quarto           Quarto?      @relation(fields: [quartoId], references: [id])
  visitante        Visitante?   @relation(fields: [visitanteId], references: [id])

  @@map("logs_acesso")
}

model Dispositivo {
  id                Int         @id @default(autoincrement())
  codigo            String      @unique
  tipo              String
  localizacao       String
  ipAddress         String?
  macAddress        String?
  status            String      @default("ativo")
  ultimaComunicacao DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  areaId            Int?
  quartoId          Int?
  alertas           Alerta[]
  area              Area?       @relation(fields: [areaId], references: [id])
  quarto            Quarto?     @relation(fields: [quartoId], references: [id])
  logsAcesso        LogAcesso[]

  @@map("dispositivos")
}

model Alerta {
  id              Int          @id @default(autoincrement())
  tipo            String
  mensagem        String
  nivelSeveridade String
  rfid            String?
  dataHora        DateTime
  resolvido       Boolean      @default(false)
  dataResolucao   DateTime?
  observacoes     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  usuarioId       Int?
  areaId          Int?
  quartoId        Int?
  dispositivoId   Int?
  area            Area?        @relation(fields: [areaId], references: [id])
  dispositivo     Dispositivo? @relation(fields: [dispositivoId], references: [id])
  funcionario     Funcionario  @relation(fields: [id], references: [id])
  quarto          Quarto?      @relation(fields: [quartoId], references: [id])

  @@map("alertas")
}

model Configuracao {
  id          Int      @id @default(autoincrement())
  chave       String   @unique
  valor       String
  descricao   String?
  tipo        String
  categoria   String
  modificavel Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("configuracoes")
}

model CartaoRfid {
  id            Int         @id @default(autoincrement())
  codigo        String      @unique
  tipo          String
  status        String      @default("disponivel")
  dataEmissao   DateTime?
  dataExpiracao DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  usuarioId     Int?        @unique
  pacienteId    Int?        @unique
  visitanteId   Int?        @unique
  funcionario   Funcionario @relation(fields: [id], references: [id])
  paciente      Paciente?   @relation(fields: [pacienteId], references: [id])
  visitante     Visitante?  @relation(fields: [visitanteId], references: [id])

  @@map("cartoes_rfid")
}

model GrupoAcesso {
  id          Int            @id @default(autoincrement())
  nome        String
  descricao   String?
  nivelAcesso String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  areas       GrupoArea[]
  usuarios    UsuarioGrupo[]

  @@map("grupos_acesso")
}

model GrupoArea {
  grupoId Int
  areaId  Int
  area    Area        @relation(fields: [areaId], references: [id])
  grupo   GrupoAcesso @relation(fields: [grupoId], references: [id])

  @@id([grupoId, areaId])
  @@map("grupos_areas")
}

model UsuarioGrupo {
  usuarioId   Int
  grupoId     Int
  grupo       GrupoAcesso @relation(fields: [grupoId], references: [id])
  funcionario Funcionario @relation(fields: [usuarioId], references: [id])

  @@id([usuarioId, grupoId])
  @@map("usuarios_grupos")
}

model HorarioVisita {
  id           Int      @id @default(autoincrement())
  diaSemana    String
  horaInicio   String
  horaFim      String
  tipoPaciente String?
  status       String   @default("ativo")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  areaId       Int
  area         Area     @relation(fields: [areaId], references: [id])

  @@map("horarios_visita")
}

model Relatorio {
  id          Int      @id @default(autoincrement())
  titulo      String
  tipo        String
  parametros  Json?
  dataGeracao DateTime
  arquivoPath String?
  status      String   @default("gerado")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("relatorios")
}
